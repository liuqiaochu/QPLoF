usethis::use_rcpp()
system('g++ -V')
system('where make')
LinkingTo: RcppEigen
install.packages("RcppEigen")
library(QRLoF)
######## parameter setting ##########
l0 = 0.4
u0 = 0.6
# spline_kn = 7 # knots for splines P=5,7
spline_kn = 5 # knots for splines P=3
tau_kn = 11 # knots for tau
tau = seq(l0,u0,length.out = tau_kn)
breaks<-seq(l0,u0,length.out = spline_kn)
degree = 3
n = 200
p = 3
v_index = 0
# beta0 = c(1,1.5,1,2,1) #p=5
# beta0 = c(2,1,4,2,1.5,2,1) #p=7
beta0 = c(1,2,1) #p=3
gamma0 = rep(1,p)
B = 3
MC = 1
set.seed(seq[j])
######## generate data ##########
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
Y = rep(y,length(tau))
Phi_tau = gen_bspline(tau,breaks,degree)
z_tau = kronecker(Phi_tau,X)
library(fda)
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
Y = rep(y,length(tau))
Phi_tau = gen_bspline(tau,breaks,degree)
z_tau = kronecker(Phi_tau,X)
###### estimation #######
result = comp.B.MM.c(z_tau,Y,tau,breaks,degree,n,p,maxiter=200,tol=10^-8,epsilon=0.01)
# result = comp.B.MM(z_tau,Y,n,p,tau,breaks,degree,maxiter=200,tol=10^-8,epsilon=0.01)
B_hat = result$B
b_hat = as.vector(B_hat)
e_hat = result$Residual
Phi = phi(Y,z_tau,tau,b_hat,n)
U_star = Un(X,Phi)
Phi
library(QRLoF)
######## parameter setting ##########
l0 = 0.4
u0 = 0.6
# spline_kn = 7 # knots for splines P=5,7
spline_kn = 5 # knots for splines P=3
tau_kn = 11 # knots for tau
tau = seq(l0,u0,length.out = tau_kn)
breaks<-seq(l0,u0,length.out = spline_kn)
degree = 3
n = 200
p = 3
v_index = 0
# beta0 = c(1,1.5,1,2,1) #p=5
# beta0 = c(2,1,4,2,1.5,2,1) #p=7
beta0 = c(1,2,1) #p=3
gamma0 = rep(1,p)
B = 3
MC = 1
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
Y = rep(y,length(tau))
Phi_tau = gen_bspline(tau,breaks,degree)
z_tau = kronecker(Phi_tau,X)
###### estimation #######
result = comp.B.MM.c(z_tau,Y,tau,breaks,degree,n,p,maxiter=200,tol=10^-8,epsilon=0.01)
######## generate predictor x and response y #########
gen_x<-function(n,p)
{
# generate x:n*p
# n: sample size
# p: dimension of preditor x
x1 = rep(1,n)
for (i in 1:(p-1)){
x = rexp(n,rate = 1)
x1 = rbind(x1,x)
}
return(t(x1))
}
gen_y<-function(x,beta0,gamma0,e,v)
{
# generate y:n*1
# x : n*p, first column is 1
# beta0 : p*1
# gamma0 : p*1
# e : epsilon
# v : coefficient for nonlinear part, v=0/1 correspond to h0/h1
# y return : n*1
# y = x%*%beta0+v*exp(0.5*rowSums(x^2))+(x%*%gamma0)*e #p=5
y = x%*%beta0+v*rowSums(x^2)+(x%*%gamma0)*e #p=3 setting x^2
return(y)
}
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
Y = rep(y,length(tau))
Phi_tau = gen_bspline(tau,breaks,degree)
z_tau = kronecker(Phi_tau,X)
###### estimation #######
result = comp.B.MM.c(z_tau,Y,tau,breaks,degree,n,p,maxiter=200,tol=10^-8,epsilon=0.01)
######## package need to library #########
library(fda)
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
Y = rep(y,length(tau))
Phi_tau = gen_bspline(tau,breaks,degree)
z_tau = kronecker(Phi_tau,X)
###### estimation #######
result = comp.B.MM.c(z_tau,Y,tau,breaks,degree,n,p,maxiter=200,tol=10^-8,epsilon=0.01)
result
B_hat = result$B
b_hat = as.vector(B_hat)
e_hat = result$Residual
Phi = phi(Y,z_tau,tau,b_hat,n)
U_star = Un(X,Phi)
U_star
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
######## parameter setting ##########
l0 = 0.4
u0 = 0.6
# spline_kn = 7 # knots for splines P=5,7
spline_kn = 5 # knots for splines P=3
tau_kn = 11 # knots for tau
tau = seq(l0,u0,length.out = tau_kn)
breaks<-seq(l0,u0,length.out = spline_kn)
degree = 3
n = 200
p = 3
v_index = 1
# beta0 = c(1,1.5,1,2,1) #p=5
# beta0 = c(2,1,4,2,1.5,2,1) #p=7
beta0 = c(1,2,1) #p=3
gamma0 = rep(1,p)
B = 3
MC = 1
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
library(QRLoF)
######## package need to library #########
library(fda)
library(combinat)
library(parallel)
######## generate predictor x and response y #########
gen_x<-function(n,p)
{
# generate x:n*p
# n: sample size
# p: dimension of preditor x
x1 = rep(1,n)
for (i in 1:(p-1)){
x = rexp(n,rate = 1)
x1 = rbind(x1,x)
}
return(t(x1))
}
gen_y<-function(x,beta0,gamma0,e,v)
{
# generate y:n*1
# x : n*p, first column is 1
# beta0 : p*1
# gamma0 : p*1
# e : epsilon
# v : coefficient for nonlinear part, v=0/1 correspond to h0/h1
# y return : n*1
# y = x%*%beta0+v*exp(0.5*rowSums(x^2))+(x%*%gamma0)*e #p=5
y = x%*%beta0+v*rowSums(x^2)+(x%*%gamma0)*e #p=3 setting x^2
return(y)
}
######## parameter setting ##########
l0 = 0.4
u0 = 0.6
# spline_kn = 7 # knots for splines P=5,7
spline_kn = 5 # knots for splines P=3
tau_kn = 11 # knots for tau
tau = seq(l0,u0,length.out = tau_kn)
breaks<-seq(l0,u0,length.out = spline_kn)
degree = 3
n = 200
p = 3
v_index = 1
# beta0 = c(1,1.5,1,2,1) #p=5
# beta0 = c(2,1,4,2,1.5,2,1) #p=7
beta0 = c(1,2,1) #p=3
gamma0 = rep(1,p)
B = 3
MC = 1
epsilon = rnorm(n,0,1)
X = gen_x(n,p)
y = gen_y(X,beta0,gamma0,epsilon,v=v_index) #h0
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
QPLoF(X,y,n,p,beta0,gamma0,epsilon,tau,breaks,degree,B)
